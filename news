import streamlit as st
import requests
import json

def generate_linkedin_post(topic, api_key):
    """
    Calls the Gemini API with Google Search enabled to find news and generate a LinkedIn post.
    """
    if not api_key:
        st.error("Please enter your Gemini API key in the sidebar to use this feature.")
        return None, None

    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key={api_key}"

    # A detailed prompt that instructs the model to act as a social media expert
    # and defines the structure of the output.
    prompt = f"""
    Based on the absolute latest news and developments from your web search about the topic '{topic}', perform the following tasks:
    1.  Summarize the most critical and recent information into a few key points.
    2.  Use this summary to write a concise, powerful, and professional LinkedIn post.
    3.  The post must be engaging, attention-grabbing, and suitable for a professional audience.
    4.  Conclude the post with 3 to 5 relevant and popular hashtags.
    """

    # The payload enables the Google Search tool and sends the prompt
    payload = {
        "contents": [{"parts": [{"text": prompt}]}],
        "tools": [{"google_search": {}}],
    }

    try:
        response = requests.post(api_url, json=payload, headers={'Content-Type': 'application/json'})
        response.raise_for_status()  # Raise an exception for bad status codes (4xx or 5xx)
        result = response.json()

        # Safely extract the generated text from the API response
        candidate = result.get('candidates', [{}])[0]
        content_part = candidate.get('content', {}).get('parts', [{}])[0]
        post_text = content_part.get('text')
        
        # Safely extract citation metadata
        citations = []
        grounding_metadata = candidate.get('groundingMetadata', {})
        if grounding_metadata and 'groundingAttributions' in grounding_metadata:
             for attribution in grounding_metadata['groundingAttributions']:
                 title = attribution.get('web', {}).get('title', 'No Title')
                 uri = attribution.get('web', {}).get('uri', '#')
                 citations.append({"title": title, "uri": uri})

        if not post_text:
             st.error("The model did not return a valid post. Please try a different topic.")
             st.json(result) # Show raw response for debugging
             return None, None

        return post_text, citations

    except requests.exceptions.RequestException as e:
        st.error(f"API request failed: {e}")
        # Try to show more helpful error from response if possible
        try:
            error_details = response.json()
            st.error(f"API Error Details: {error_details.get('error', {}).get('message', 'No specific message.')}")
        except (ValueError, AttributeError):
             st.error(f"Response Body: {response.text if 'response' in locals() else 'No response'}")
        return None, None
    except (json.JSONDecodeError, IndexError, KeyError) as e:
        st.error(f"Failed to parse AI response. The model's output may be malformed. Error: {e}")
        st.json(result)  # Show the raw response for debugging
        return None, None

# --- UI Layout ---
st.set_page_config(page_title="AI LinkedIn Post Generator", page_icon="ðŸ”—", layout="centered")

# --- Header ---
st.image("https://i.imgur.com/g0QuO6B.png", width=100)
st.title("ðŸ”— AI News Assistant for LinkedIn")
st.markdown("Enter a topic to get a powerful, news-driven LinkedIn post crafted by AI.")

# --- Sidebar for API Key ---
st.sidebar.header("Configuration")
api_key = st.sidebar.text_input("Gemini API Key", type="password", help="Get your free key from Google AI Studio.")

# --- Main Content ---
topic = st.text_input("Enter your topic (e.g., 'advances in quantum computing', 'latest trends in renewable energy'):", "")

if st.button("Generate LinkedIn Post", type="primary"):
    if topic:
        with st.spinner("ðŸ¤– Searching the web and crafting your post..."):
            linkedin_post, citations = generate_linkedin_post(topic, api_key)
            if linkedin_post:
                st.subheader("Your Generated LinkedIn Post")
                st.markdown(
                    """
                    <style>
                    .post-container {
                        border: 1px solid #e1e4e8;
                        border-radius: 8px;
                        padding: 20px;
                        background-color: #ffffff;
                        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
                        margin-bottom: 20px;
                    }
                    .post-container p {
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                        font-size: 16px;
                        line-height: 1.6;
                        color: #24292e;
                    }
                    .citations-container {
                        margin-top: 25px;
                        border-top: 1px solid #e1e4e8;
                        padding-top: 15px;
                    }
                    .citations-container h4 {
                        font-size: 14px;
                        color: #586069;
                    }
                     .citations-container a {
                        font-size: 13px;
                    }
                    </style>
                    """, unsafe_allow_html=True
                )
                
                # Format the post text to handle newlines correctly for display
                formatted_post = linkedin_post.replace('\n', '<br>')
                
                # Display the post in the styled container
                st.markdown(f'<div class="post-container"><p>{formatted_post}</p></div>', unsafe_allow_html=True)
                
                # Display the news sources (citations)
                if citations:
                    with st.expander("ðŸ“° View News Sources Used by the AI"):
                        for i, source in enumerate(citations):
                           st.markdown(f"[{i+1}. {source['title']}]({source['uri']})")

    else:
        st.warning("Please enter a topic to generate a post.")

